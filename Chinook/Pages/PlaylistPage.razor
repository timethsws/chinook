@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Chinook.Services

<h1>Playlist <strong>@Playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-@InfoType fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnFavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] PlaylistService PlaylistService { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    private string InfoType;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Playlist = await PlaylistService.GetAsync(CurrentUserId, PlaylistId);
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);

        Playlist = await PlaylistService.GetAsync(CurrentUserId, PlaylistId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        var success = await PlaylistService.FavouriteTrack(trackId, CurrentUserId);
        if (success && Playlist.Name != PlaylistService.FAVORITES_PLAYLIST_NAME)
        {
            track.IsFavorite = true;
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
            InfoType = "info";
        }
        else if (success)
        {
            Playlist = await PlaylistService.GetAsync(CurrentUserId, PlaylistId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
            InfoType = "info";
        }
        
    }

    private async Task UnFavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        var success = await PlaylistService.UnFavouriteTrack(trackId, CurrentUserId);
        if (success && Playlist.Name != PlaylistService.FAVORITES_PLAYLIST_NAME)
        {
            track.IsFavorite = false;
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
            InfoType = "danger";
        }
        else if (success)
        {
            Playlist = await PlaylistService.GetAsync(CurrentUserId, PlaylistId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
            InfoType = "danger";
        }
    }

    private async Task RemoveTrack(long trackId)
    {
        await PlaylistService.RemoveTrack(trackId, PlaylistId);
        Playlist = await PlaylistService.GetAsync(CurrentUserId, PlaylistId);
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
